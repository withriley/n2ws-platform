AWSTemplateFormatVersion: 2010-09-09
Description: N2WS Worker Machine VPC
Parameters:
  VpcCidr:
    Type: String
    Default: 172.20.20.0/23
    MinLength: '9'
    MaxLength: '18'
    Description: Must be a valid Private IPv4 CIDR e.g. 10.140.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  VpcName:
    Type: String
    Default: n2ws-worker-vpc
    Description: The prefix for the structures created by this cloudforamtion.
  N2WSWorkerSubnetCIDR:
    Type: String
    Default: 172.20.20.0/24
    Description: Zone
  PermissionsBoundary:
    Description: 'Optional ARN for a policy that will be used as the permission boundary for all roles created by this template.'
    Type: String
    Default: ''
  RetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  TrafficType:
    Description: 'The type of traffic to log.'
    Type: String
    Default: REJECT
    AllowedValues:
    - ACCEPT
    - REJECT
    - ALL
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Vpc Configuration
        Parameters:
          - VpcCidr
          - VpcName
          - N2WSWorkerSubnetCIDR
      - Label:
          default: VPC Flow Log Configuration
        Parameters:
          - RetentionInDays
          - TrafficType
    ParameterLabels:
      VpcCidr:
        default: VPC Cidr block
      VpcName:
        default: VPC Name
      N2WSWorkerSubnetCIDR:
        default: N2WS Worker Subnet Cidr block
      RetentionInDays: 
        default: VPC Flow Log retention in days
      TrafficType:
        default: Traffic Type to be logged
Conditions:
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: VpcName
            - "-vpc"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: VpcName
            - "-igw"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  N2WSWorkerA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock:
        Ref: N2WSWorkerSubnetCIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: VpcName
            - n2ws-workers-a
      VpcId:
        Ref: VPC
  RouteTablePublicTrusted:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: VpcName
            - public-trusted-rt
  PublicTrustedCPMInstanceRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '13.55.4.79/32' # Riley N2WS CPM Instance Elastic IP Address
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTablePublicTrusted
  PublicTrustedRileyWorkspaceRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '52.63.255.188/32' # Riley Amazon Workspaces Elastic IP Address
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTablePublicTrusted
  AssociationPublicTrustedA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: N2WSWorkerA
      RouteTableId:
        Ref: RouteTablePublicTrusted
  N2WSWorkersSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Join:
        - " "
        - - SG for N2WS Worker instance in
          - Ref: VpcName  
      SecurityGroupIngress:
      - IpProtocol: "6"
        FromPort: "22"
        ToPort: "22"
        CidrIp:
          Ref: VpcCidr
      - IpProtocol: "6"
        FromPort: "22"
        ToPort: "22"
        CidrIp: '52.63.255.188/32'
      - IpProtocol: "6"
        FromPort: "443"
        ToPort: "443"
        CidrIp:
          Ref: VpcCidr
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: VpcName
            - n2ws-sg
      VpcId:
        Ref: VPC
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action:
          - "s3:*"
          Resource:
          - arn:aws:s3:::/
          - arn:aws:s3:::*          
      RouteTableIds:
      - Ref: RouteTablePublicTrusted
      ServiceName: com.amazonaws.ap-southeast-2.s3
      VpcId:
        Ref: VPC
      VpcEndpointType: Gateway
  EBSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-southeast-2.ebs
      VpcId:
        Ref: VPC
      VpcEndpointType: Interface
      SecurityGroupIds:
      - Ref: N2WSWorkersSG
      PrivateDnsEnabled: 'True'
      SubnetIds:
      - Ref: N2WSWorkerA
  VpcFlowLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - - riley-flow-log-role
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "vpc-flow-logs.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName:
            Fn::Join:
              - "-"
              - - my-auto-scaling-group
                - Fn::Select:
                    - 4
                    - Fn::Split:
                        - "-"
                        - Fn::Select:
                            - 2
                            - Fn::Split:
                                - /
                                - Ref: AWS::StackId
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Effect: "Allow"
                Resource: "*"
  VpcFlowLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref RetentionInDays
  VpcFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'VpcFlowLogRole.Arn'
      LogGroupName: !Ref VpcFlowLogGroup
      ResourceId: 
        Ref: VPC
      ResourceType: 'VPC'
      TrafficType: !Ref TrafficType